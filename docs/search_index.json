[
["index.html", "2020 SL HSE DPO 1 Prerequisites", " 2020 SL HSE DPO –ì. –ú–æ—Ä–æ–∑ 2020 1 Prerequisites –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∑–∞–Ω—è—Ç–∏–π, —è –±—ã –ø–æ–ø—Ä–æ—Å–∏–ª –≤–∞—Å —Å–∫–∞—á–∞—Ç—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –∫–ª–∞—Å—Å–µ: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ R, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª–µ–¥—É—é—â—É—é —Å—Å—ã–ª–∫—É: https://cloud.r-project.org/ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ RStudio, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª–µ–¥—É—é—â—É—é —Å—Å—ã–ª–∫—É: https://rstudio.com/products/rstudio/download/#download (FREE version, –ø–ª–∞—Ç–∏—Ç—å –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–¥–æ!) –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ RStudio, –Ω–∞–ø–µ—á–∞—Ç–∞–π—Ç–µ 2+2, –∏ –Ω–∞–∂–º–∏—Ç–µ Enter. –ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —á—Ç–æ-—Ç–æ —Ç–∞–∫–æ–µ, —Ç–æ–≥–¥–∞ –≤—ã –≥–æ—Ç–æ–≤—ã –∫ –∑–∞–Ω—è—Ç–∏—è–º. –¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ https://rstudio.cloud/. –≠—Ç–æ –¥–µ–ª–∞—Ç—å –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ —ç—Ç–æ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –Ω–∞ –≤–∞—à–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ —á—Ç–æ-—Ç–æ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å. –Ø –¥–∏—Å–≥—Ä–∞—Ñ–∏–∫ ‚Äî —Ç–∞–∫ —á—Ç–æ –ø—Ä–æ—Å—Ç–∏—Ç–µ –∑–∞ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ–ø–µ—á–∞—Ç–∫–∏. "],
["intro.html", "2 –í–≤–µ–¥–µ–Ω–∏–µ –≤ R –∏ RStudio 2.1 –í–≤–µ–¥–µ–Ω–∏–µ 2.2 Introduction to RStudio 2.3 R as a calculator 2.4 Comments 2.5 Functions 2.6 Variables 2.7 Vector 2.8 Packages 2.9 Dataframe (tibble) 2.10 Data import", " 2 –í–≤–µ–¥–µ–Ω–∏–µ –≤ R –∏ RStudio 2.1 –í–≤–µ–¥–µ–Ω–∏–µ 2.1.1 –ß—Ç–æ —Ç–∞–∫–æ–µ data science? Data science (–ø–æ-—Ä—É—Å—Å–∫–∏ –≥–æ–≤–æ—Ä—è—Ç –ø–æ-—Ä–∞–∑–Ω–æ–º—É: –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö, –¥–∞—Ç–∞ —Å–∞–π–µ–Ω—Å, –¥–∞—Ç–∞-—Å–∞—Ç–∞–Ω–∏–∑–º –∏ –¥—Ä.) ‚Äî –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è. –≠—Ç–∞ –æ–±–ª–∞—Å—Ç—å –æ–±—ä–µ–¥–Ω–∏—è–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –Ω–∞—É–∫–∏, –º–∞—Ç–µ–º—Ç–∞–∏–∫—É –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –Ω–æ –≤–æ—Ç —Å–∫–æ–ª—å–∫–æ –Ω–∞—É–∫–∏ –≤ data science —Ç—Ä—É–¥–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å. –í–æ –º–Ω–æ–≥–∏—Ö –Ω–∞—É—á–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö –ø–æ—è–≤–ª—è—é—Ç—Å—è –Ω–æ–≤—ã–µ –ø–æ–¥–æ–±–ª–∞—Å—Ç–∏, –≤–¥–æ—Ö–Ω–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–¥–∏–≥–º–æ–π data science: –ë–∏–æ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –ö—Ä–∏–º–∏–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¶–∏—Ñ—Ä–æ–≤—ã–µ –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –î–∞—Ç–∞ –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∏–∏–∫–∞ –ú–µ–¥–∏—Ü–∏–Ω–∞ –æ—Å–Ω–æ–≤–æ–Ω–Ω–∞—è –Ω–∞ –¥–∞–Ω–Ω—ã—Ö ‚Ä¶ –ü–∏—à—É—Ç—Å—è –≤—Å–µ –±–æ–ª—å—à–µ –∫–Ω–∏–≥ ‚ÄúData Science for ‚Ä¶‚Äù: psychologists (Hansj√∂rg 2019) immunologists (Thomas and Pallett 2019) business (Provost and Fawcett 2013) public policy (Brooks and Cooper 2013) fraud detection (Baesens, Van Vlasselaer, and Verbeke 2015) ‚Ä¶ –õ—é–¥–∏ –ø—Ä–∞–∫—Ç–∏–∫—É—é—â–∏–µ data science –¥–æ–ª–∂–Ω—ã —É–º–µ—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ: –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç–∏—Ç—Å—Ç–∏—á–µ—Å–∫—É—é –º–æ–¥–µ–ª—å, –æ—Å–Ω–æ–≤–∞–Ω–Ω—É—é –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã–º –æ–±—Ä–∞–∑–æ–º 2.1.2 –ü–æ—á–µ–º—É R? R (R Core Team 2019) ‚Äî —ç—Ç–æ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å –±–æ–ª—å—à–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ø–∞–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç –≤ —Å–∞–º—ã—Ö —Ä–∞–∑–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö –Ω–∞—É–∫–∏ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –ö–æ–Ω–µ—á–Ω–æ, –µ—Å—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: Python (VanderPlas 2016; Grus 2019) Julia (Bezanson et al. 2017) bash (Janssens 2014) java (Brzustowicz 2017) ‚Ä¶ –û—Ç–≤–µ—Ç—ã –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã –≤ R –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏: –∫–Ω–∏–≥–∞ –æ–Ω–ª–∞–π–Ω ‚ÄúR for data science‚Äù (Wickham 2016) R community stackoverflow –ª—é–±–æ–π —É–¥–æ–±–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤–∏–∫ ‚Ä¶ 2.2 Introduction to RStudio R is the programming language. RStudio is the most popular IDE (Integrated Development Environment) for R language. When you open RStudio for the first time you can see something like this: When you press button at the top of the left window you will be able to see all four panels of RStudio. 2.3 R as a calculator Lets first start with the calculator. Press in R console 2+9 ## [1] 11 50*(9-20) ## [1] -550 3^3 ## [1] 27 9^0.5 ## [1] 3 9+0.5 ## [1] 9.5 9+.5 ## [1] 9.5 pi ## [1] 3.141593 Remainder after division 10 %% 3 ## [1] 1 So you are ready to solve some really hard equations (round it four decimal places): \\[\\frac{\\pi+2}{2^{3-\\pi}}\\] üìã list of hints ‚û° üëÅ Are you sure that you rounded the result? ‚û° I expect the answer to be rounded to four decimal places: 0.87654321 becomes 0.8765. üëÅ Are you sure you didn‚Äôt get into the brackets trap? ‚û° Even though there isn‚Äôt any brackets in the mathematical notation, you need to add them in R, otherwise the operation order will be wrong. 2.4 Comments Any text after a hash # within the same line is considered a comment. 2+2 # it is four ## [1] 4 # you can put any comments here 3+3 ## [1] 6 2.5 Functions The most important part of R is functions: here are some of them: sqrt(4) ## [1] 2 abs(-5) ## [1] 5 sin(pi/2) ## [1] 1 cos(pi) ## [1] -1 sum(2, 3, 9) ## [1] 14 prod(5, 3, 9) ## [1] 135 sin(cos(pi)) ## [1] -0.841471 Each function has a name and zero or more arguments. All arguments of the function should be listed in parenthesis and separated by comma: pi ## [1] 3.141593 round(pi, 2) ## [1] 3.14 Each function‚Äôs argument has its own name and serial number. If you use names of the function‚Äôs arguments, you can put them in any order. If you do not use names of the function‚Äôs arguments, you should put them according the serial number. round(x = pi, digits = 2) ## [1] 3.14 round(digits = 2, x = pi) ## [1] 3.14 round(x = pi, d = 2) ## [1] 3.14 round(d = 2, x = pi) ## [1] 3.14 round(pi, 2) ## [1] 3.14 round(2, pi) # this is not the same as all previous! ## [1] 2 There are some functions without any arguments, but you still should use parenthesis: Sys.Date() # correct ## [1] &quot;2020-04-13&quot; Sys.Date # wrong ## function () ## as.Date(as.POSIXlt(Sys.time())) ## &lt;bytecode: 0x5585bd2546f8&gt; ## &lt;environment: namespace:base&gt; Each function in R is documented. You can read its documentation typing a question mark before the function name: ?Sys.Date Explore the function log() and calculate the following logarithm: \\[\\log_3(3486784401)\\] üìã list of hints ‚û° üëÅ A-a-a! I don‚Äôt remember anything about logarithms‚Ä¶ ‚û° The logarithm is the inverse function to exponentiation. That means the logarithm of a given number x is the exponent to which another fixed number, the base b, must be raised, to produce that number x. \\[10^n = 1000,\\text{ what is n?}\\] \\[n = \\log_{10}(1000)\\] üëÅ What does this small 3 in the task mean? ‚û° This is the base of the logarithm. So the task is: what is the exponent to which another fixed number, the base 3, must be raised, to produce that number 3486784401. 2.6 Variables Everything in R can be stored in a variable: x &lt;- 5 + 6 As a result, no output in the Console, and a new variable x appear in the Environment window. From now on I can use this new variable: x + x ## [1] 22 sum(x, x, 7) ## [1] 29 All those operations don‚Äôt change the variable value. In order to change the variable value you need to make a new assignment: x &lt;- 5 + 6 + 7 The fast way for creating &lt;- in RStudio is to press Alt - on your keyboard. It is possible to use equal sign = for assignment operation, but the recommendations are to use arrow &lt;- for the assignment, and equal sign = for giving arguments‚Äô value inside the functions. For removing vector you need to use the function rm(): rm(x) x ## Error in eval(expr, envir, enclos): object &#39;x&#39; not found 2.6.1 Variable comparison It is possible to compare different variables x &lt;- 18 x &gt; 18 ## [1] FALSE x &gt;= 18 ## [1] TRUE x &lt; 100 ## [1] TRUE x &lt;= 18 ## [1] TRUE x == 18 ## [1] TRUE x != 18 ## [1] FALSE Operator ! can work by itself changing logical values into reverse: !TRUE ## [1] FALSE !FALSE ## [1] TRUE 2.6.2 Variable types There are several types of variables in R. In this course the only important types will be double (all numbers), character (or strings), and logical: x &lt;- 2+3 typeof(x) ## [1] &quot;double&quot; y &lt;- &quot;Cze≈õƒá&quot; typeof(y) ## [1] &quot;character&quot; z &lt;- TRUE typeof(z) ## [1] &quot;logical&quot; 2.7 Vector An R object that contains multiple values of the same type is called vector. It could be created with the command c(): c(3, 0, pi, 23.4, -53) ## [1] 3.000000 0.000000 3.141593 23.400000 -53.000000 c(&quot;Krak√≥w&quot;, &quot;Warszawa&quot;, &quot;Cieszyn&quot;) ## [1] &quot;Krak√≥w&quot; &quot;Warszawa&quot; &quot;Cieszyn&quot; c(FALSE, FALSE, TRUE) ## [1] FALSE FALSE TRUE a &lt;- c(2, 3, 4) b &lt;- c(5, 6, 7) c(a, b) ## [1] 2 3 4 5 6 7 For the number sequences there is an easy way: 1:10 ## [1] 1 2 3 4 5 6 7 8 9 10 3:-5 ## [1] 3 2 1 0 -1 -2 -3 -4 -5 From now on you can understand that everything we have seen before is a vector of length one. That is why there is [1] in all outputs: it is just an index of elements in a vector. Have a look here: 1:60 ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ## [26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 ## [51] 51 52 53 54 55 56 57 58 59 60 60:1 ## [1] 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 ## [26] 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 ## [51] 10 9 8 7 6 5 4 3 2 1 There is also a function seq() for creation of arithmetic progressions: 1:20 ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 seq(from = 1, to = 20, by = 1) ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 seq(from = 2, to = 100, by = 13) ## [1] 2 15 28 41 54 67 80 93 Use the argument length.out of function seq() and create an arithmetic sequence from \\(\\pi\\) to \\(2\\pi\\) of length 50. There are also some built-in vectors: letters ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; ## [20] &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; LETTERS ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; &quot;G&quot; &quot;H&quot; &quot;I&quot; &quot;J&quot; &quot;K&quot; &quot;L&quot; &quot;M&quot; &quot;N&quot; &quot;O&quot; &quot;P&quot; &quot;Q&quot; &quot;R&quot; &quot;S&quot; ## [20] &quot;T&quot; &quot;U&quot; &quot;V&quot; &quot;W&quot; &quot;X&quot; &quot;Y&quot; &quot;Z&quot; month.name ## [1] &quot;January&quot; &quot;February&quot; &quot;March&quot; &quot;April&quot; &quot;May&quot; &quot;June&quot; ## [7] &quot;July&quot; &quot;August&quot; &quot;September&quot; &quot;October&quot; &quot;November&quot; &quot;December&quot; month.abb ## [1] &quot;Jan&quot; &quot;Feb&quot; &quot;Mar&quot; &quot;Apr&quot; &quot;May&quot; &quot;Jun&quot; &quot;Jul&quot; &quot;Aug&quot; &quot;Sep&quot; &quot;Oct&quot; &quot;Nov&quot; &quot;Dec&quot; 2.7.1 Vector coercion Vectors are R objects that contain multiple values of the same type. But what if we merged together different types? c(1, &quot;34&quot;) ## [1] &quot;1&quot; &quot;34&quot; c(1, TRUE) ## [1] 1 1 c(TRUE, &quot;34&quot;) ## [1] &quot;TRUE&quot; &quot;34&quot; It is clear that there is a hierarchy: strings &gt; double &gt; logical. It is not universal across different programming languages. It doesn‚Äôt correspond to the amount of values of particular type: c(1, 2, 3, &quot;34&quot;) ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;34&quot; c(1, TRUE, FALSE, FALSE) ## [1] 1 1 0 0 The same story could happen during other operations: 5+TRUE ## [1] 6 2.7.2 Vector operations All operations, that we discussed earlier, could be done with vectors of the same length: 1:5 + 6:10 ## [1] 7 9 11 13 15 1:5 - 6:10 ## [1] -5 -5 -5 -5 -5 1:5 * 6:10 ## [1] 6 14 24 36 50 There are operations where the vector of any length and vector of length one is involved: 1:5 + 7 ## [1] 8 9 10 11 12 1:5 - 7 ## [1] -6 -5 -4 -3 -2 1:5 / 7 ## [1] 0.1428571 0.2857143 0.4285714 0.5714286 0.7142857 There are a lot of functions in R that are vectorised. That means that applying this function to a vector is the same as applying this function to each element of the vector: sin(1:5) ## [1] 0.8414710 0.9092974 0.1411200 -0.7568025 -0.9589243 sqrt(1:5) ## [1] 1.000000 1.414214 1.732051 2.000000 2.236068 abs(-5:3) ## [1] 5 4 3 2 1 0 1 2 3 2.7.3 Indexing vectors How to get some value or banch of values from a vector? You need to index them: x &lt;- c(3, 0, pi, 23.4, -53) y &lt;- c(&quot;Krak√≥w&quot;, &quot;Warszawa&quot;, &quot;Cieszyn&quot;) x[4] ## [1] 23.4 y[2] ## [1] &quot;Warszawa&quot; It is possible to have a vector as index: x[1:2] ## [1] 3 0 y[c(1, 3)] ## [1] &quot;Krak√≥w&quot; &quot;Cieszyn&quot; It is possible to index something that you do not want to see in the result: y[-2] ## [1] &quot;Krak√≥w&quot; &quot;Cieszyn&quot; x[-c(1, 4)] ## [1] 0.000000 3.141593 -53.000000 It is possible to have other variables as an index z &lt;- c(3, 2) x[z] ## [1] 3.141593 0.000000 y[z] ## [1] &quot;Cieszyn&quot; &quot;Warszawa&quot; It is possible to index with a logical vector: x[c(TRUE, FALSE, TRUE, TRUE, FALSE)] ## [1] 3.000000 3.141593 23.400000 That means that we could use TRUE/FALSE-vector produced by comparison: x[x &gt; 2] ## [1] 3.000000 3.141593 23.400000 It works because x &gt; 2 is a vector of logical values: x &gt; 2 ## [1] TRUE FALSE TRUE TRUE FALSE It is possible to use ! operator here changing all TRUE values to FALSE and vice versa. x[!(x &gt; 2)] ## [1] 0 -53 How many elements in the vector g if expression g[pi &lt; 1000] does not return an error? 2.7.4 NA Sometimes there are some missing values in the data, so it is represented with NA NA ## [1] NA c(1, NA, 9) ## [1] 1 NA 9 c(&quot;Krak√≥w&quot;, NA, &quot;Cieszyn&quot;) ## [1] &quot;Krak√≥w&quot; NA &quot;Cieszyn&quot; c(TRUE, FALSE, NA) ## [1] TRUE FALSE NA It is possible to check, whether there are missing values or not x &lt;- c(&quot;Krak√≥w&quot;, NA, &quot;Cieszyn&quot;) y &lt;- c(&quot;Krak√≥w&quot;, &quot;Warszawa&quot;, &quot;Cieszyn&quot;) is.na(x) ## [1] FALSE TRUE FALSE is.na(y) ## [1] FALSE FALSE FALSE Some functions doesn‚Äôt work with vecotors that contain missed values, so you need to add argument na.rm = TRUE: x &lt;- c(1, NA, 9, 5) mean(x) ## [1] NA mean(x, na.rm = TRUE) ## [1] 5 min(x, na.rm = TRUE) ## [1] 1 max(x, na.rm = TRUE) ## [1] 9 median(x, na.rm = TRUE) ## [1] 5 range(x, na.rm = TRUE) ## [1] 1 9 2.8 Packages The most important and useful part of R is hidden in its packages. Everything that we discussed so far is basic R functionality invented back in 1979. Since then a lot of different things changed, so all new practices for data analysis, visualisation and manipulation are packed in packages. During our class we will learn the most popular ‚Äúdialect‚Äù of R called tidyverse. In order to install packages you need to use a command. Let‚Äôs install the tidyverse package: install.packages(&quot;tidyverse&quot;) For today we also will need the readxl package: install.packages(&quot;readxl&quot;) After you have downloaded packages nothing will change. You can not use any fucntionality from packages unless you load the package with the library() function: library(&quot;tidyverse&quot;) ## ‚îÄ‚îÄ Attaching packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ## ‚úì ggplot2 3.3.0 ‚úì purrr 0.3.3 ## ‚úì tibble 3.0.0 ‚úì dplyr 0.8.5 ## ‚úì tidyr 1.0.2 ‚úì stringr 1.4.0 ## ‚úì readr 1.3.1 ‚úì forcats 0.5.0 ## ‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() Not loading a package is the most popular mistake of my students. So remember: install.packages(\"...\") is like you are buying a screwdriver set; library(\"...\") is like you are starting to use your screwdriver. For the further lectures we will need tidyverse package. Please install tidyverse package and load it. 2.8.1 tidyverse The tidyverse is a set of packages: tibble, for tibbles, a modern re-imagining of data frames ‚Äî analogue of tables in R readr, for data import dplyr, for data manipulation tidyr, for data tidying (we will discuss it later today) ggplot2, for data visualisation purrr, for functional programming 2.9 Dataframe (tibble) A data frame is a collection of variables of the same number of rows with unique row names. Here is an example dataframe with the Tomm Moore filmography: moore_filmography &lt;- tibble(title = c(&quot;The Secret of Kells&quot;, &quot;Song of the Sea&quot;, &quot;Kahlil Gibran&#39;s The Prophet&quot;, &quot;The Breadwinner&quot;, &quot;Wolfwalkers&quot;), year = c(2009, 2014, 2014, 2017, 2020), director = c(TRUE, TRUE, TRUE, FALSE, TRUE)) moore_filmography There are a lot of built-in dataframes: mtcars iris You can find information about them: ?mtcars ?iris Dataframe consists of vectors that could be called using $ sign: moore_filmography$year ## [1] 2009 2014 2014 2017 2020 moore_filmography$title ## [1] &quot;The Secret of Kells&quot; &quot;Song of the Sea&quot; ## [3] &quot;Kahlil Gibran&#39;s The Prophet&quot; &quot;The Breadwinner&quot; ## [5] &quot;Wolfwalkers&quot; It is possible to add a vector to an existing dataframe: moore_filmography$producer &lt;- c(TRUE, TRUE, FALSE, TRUE, TRUE) moore_filmography There are some useful functions that tell you somethig about a dataframe: nrow(moore_filmography) ## [1] 5 ncol(moore_filmography) ## [1] 4 summary(moore_filmography) ## title year director producer ## Length:5 Min. :2009 Mode :logical Mode :logical ## Class :character 1st Qu.:2014 FALSE:1 FALSE:1 ## Mode :character Median :2014 TRUE :4 TRUE :4 ## Mean :2015 ## 3rd Qu.:2017 ## Max. :2020 str(moore_filmography) ## tibble [5 √ó 4] (S3: tbl_df/tbl/data.frame) ## $ title : chr [1:5] &quot;The Secret of Kells&quot; &quot;Song of the Sea&quot; &quot;Kahlil Gibran&#39;s The Prophet&quot; &quot;The Breadwinner&quot; ... ## $ year : num [1:5] 2009 2014 2014 2017 2020 ## $ director: logi [1:5] TRUE TRUE TRUE FALSE TRUE ## $ producer: logi [1:5] TRUE TRUE FALSE TRUE TRUE We will work exclusively with dataframes. But it is not the only data structure in R. How many rows are in the iris dataframe? How many columns are in the mtcars dataframe? 2.9.1 Indexing dataframes Since dataframes are two-dimensional objects it is possible to index its rows and columns. Rows are the first index, columns are the second index: moore_filmography[3, 2] moore_filmography[3,] moore_filmography[,2] moore_filmography[,1:2] moore_filmography[,-3] moore_filmography[,-c(1:2)] moore_filmography[,&quot;year&quot;] moore_filmography[,c(&quot;title&quot;, &quot;year&quot;)] moore_filmography[moore_filmography$year &gt; 2014,] 2.10 Data import 2.10.1 .csv files A .csv files (comma-separated values) is a delimited text file that uses a comma (or other delemeters such as tabulation or semicolon) to separate values. It is broadly used bacause it is possible to parse such a file using computers and people can edit it in the Office programs (Microsoft Excel, LibreOffice Calc, Numbers on Mac). Here is our moore_filmography dataset in the .csv format: title,year,director,producer The Secret of Kells,2009,TRUE,TRUE Song of the Sea,2014,TRUE,TRUE Kahlil Gibran&#39;s The Prophet,2014,TRUE,FALSE The Breadwinner,2017,FALSE,TRUE Wolfwalkers,2020,TRUE,TRUE Let‚Äôs create a variable with this file: our_csv &lt;- &quot;title,year,director,producer The Secret of Kells,2009,TRUE,TRUE Song of the Sea,2014,TRUE,TRUE Kahlil Gibran&#39;s The Prophet,2014,TRUE,FALSE The Breadwinner,2017,FALSE,TRUE Wolfwalkers,2020,TRUE,TRUE&quot; Now we are ready to use read_csv() function: read_csv(our_csv) It is also possible to read files from your computer. Download this file on your computer (press Ctrl S or Cmd S) and read into R: read_csv(&quot;C:/path/to/your/file/moore_filmography.csv&quot;) It is also possible to read files from the Internet: read_csv(&quot;https://raw.githubusercontent.com/agricolamz/2020.02_Naumburg_R/master/data/moore_filmography.csv&quot;) ## Parsed with column specification: ## cols( ## title = col_character(), ## year = col_double(), ## director = col_logical(), ## producer = col_logical() ## ) Because of the 2019‚Äì20 Wuhan coronavirus outbreak the city of Wuhan is on media everywhere. In Russian for some reason Wuhan is sometimes masculine and sometimes it is feminin. I looked into other Slavic languages and recorded obtained data into the .csv file. Download this files to R. What variables does it have? All file manipulations in R are somehow connected with space on your computer via working directory. You can get information about your current working directory using getwd() function. You can change your working directory using setwd() function. If a file you want to read is in the working directory you don‚Äôt need to write the whole path to file: read_csv(&quot;moore_filmography.csv&quot;) The same simple function will create your .csv file: write_csv(moore_filmography, &quot;moore_filmography_v2.csv&quot;) Sometimes reading .csv files into Microsoft Excel is complicated, please follow the following instructions. 2.10.2 .xls and .xlsx files There is a package readxl that allows to open and save .xsl and .xslx files. Install and load the package: library(readxl) Here is a test file. Download it to your computer and put it to your working directory: read_xlsx(&quot;moore_filmography.xlsx&quot;) .xls and .xlsx files could have multiple tables on different sheets: read_xlsx(&quot;moore_filmography.xlsx&quot;, sheet = &quot;iris&quot;) References "],
["—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è-–∏-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è-–¥–∞–Ω–Ω—ã—Ö-dplyr-–∏-ggplot2.html", "3 –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: dplyr –∏ ggplot2", " 3 –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: dplyr –∏ ggplot2 –í–æ-–ø–µ—Ä–≤—ã—Ö, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É: library(tidyverse) "],
["stringr.html", "4 –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ –∏ —Ç–µ–∫—Å—Ç–æ–º: stringr, gutenbergr, tidytext, udpipe", " 4 –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ –∏ —Ç–µ–∫—Å—Ç–æ–º: stringr, gutenbergr, tidytext, udpipe –í –Ω–∞—á–∞–ª–µ –º—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞–∫–µ—Ç stringr (–≤—Ö–æ–¥–∏—Ç –≤ tidyverse), —Ç–∞–∫ —á—Ç–æ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É: library(tidyverse) "],
["references.html", "References", " References "]
]
